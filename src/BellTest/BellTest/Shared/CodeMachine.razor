@using BellTest.Internals
@implements IDisposable

@inject IListener listener 
@inject ICodeList codeList 

<div class="codemachine-toplevel container rounded p-md-3 p-1 mb-2">
    <div class="row">
        <div class="col"><p>Please send the code: @selectedCode</p></div>
    </div>
    <div class="row align-items-center">
        <div class="col text-center">
            <Telegraph Size="200" Active="@lineActive" />
        </div>
        @if (showDebugInfo)
        {
            <div class="col text-center">
                <p>@lineActive</p>
            </div>
        }
        <div class="col text-center">
            <Plunger Size="50" OnPush="@PlungerPushed" OnRelease="@PlungerReleased" />
        </div>
    </div>
    <div class="row">
        <div class="col-8 text-left"><p>@lastCodeResult</p></div>
        <div class="col-4 text-right">
            <Score TotalPlayed="@totalPlayed" ScoredCorrect="@score" ResetScore="@ResetScore"/>
        </div>
    </div>
</div>
<Instructions />
<div class="p-md-3 p-1 mb-2">
    <input class="form-check-input" type="checkbox" @bind="@showDebugInfo" id="showDebugCheckbox" />
    <label class="form-check-label" for="showDebugCheckbox">Show debug information?</label>
</div>
@if (showDebugInfo)
{
    <DebugInfo Data="@(debugData.Select(d => d.ToString("HH:mm:ss.fff")))" />
}
@code {
    private bool lineActive;
    private DateTime[] debugData = Array.Empty<DateTime>();
    private string lastCodeResult = "";
    private BellCode selectedCode = null;
    private int totalPlayed = 0;
    private int score = 0;
    private bool showDebugInfo = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        listener.BellCodeParsed += BellCodeReceived;
        selectedCode = codeList.GetRandomCode();
    }

    public void Dispose()
    {
        listener.BellCodeParsed -= BellCodeReceived;
    }

    private void PlungerPushed(PointerEventArgs e)
    {
        lineActive = true;
        lastCodeResult = "";
        listener.RecordPush();
        debugData = listener.GetData().ToArray();
    }

    private void PlungerReleased(PointerEventArgs e)
    {
        lineActive = false;
        listener.RecordRelease();
    }

    private void BellCodeReceived(object src, BellCodeEventArgs e)
    {
        if (e.Code == selectedCode.Code)
        {
            lastCodeResult = "Correct!";
            score++;
        }
        else
        {
            lastCodeResult = $"You sent {e.Code} but you were asked to send {selectedCode.Code}";
        }
        totalPlayed++;
        selectedCode = codeList.GetRandomCode();
        StateHasChanged();
    }

    private void ResetScore(object src)
    {
        score = 0;
        totalPlayed = 0;
        StateHasChanged();
    }
}
